//////////////////////////////////////////////////////////////
// Exemple complet de script draw++ utilisant toutes les     //
// fonctionnalités de la grammaire définie.                 //
//////////////////////////////////////////////////////////////

// Déclaration et initialisation de variables
var centerX = 300;
var centerY = 300;
var radius = 50;
var numCircles = 5;
var angle = 0;
var speed = 0.05;
var isAnimating = true;

// Définition d'une fonction pour dessiner un cercle
function drawCircle(x, y, r) {
    // Logique pour dessiner un cercle (fonction prédéfinie)
    circle(x, y, r);
}

// Définition d'une fonction pour dessiner une étoile
function drawStar(x, y, size) {
    // Logique pour dessiner une étoile (fonction personnalisée)
    // Dessiner un polygone en étoile
    polygon(x, y, size, 5, 2);
}

// Placement du curseur au centre
cursor(centerX, centerY);

// Dessin initial d'un cercle au centre
drawCircle(centerX, centerY, radius);

// Boucle pour dessiner plusieurs cercles autour du centre
for (var i = 0; i < numCircles; i = i + 1) {
    var offsetX = centerX + (radius * 3) * cos(angle + (i * (360 / numCircles)));
    var offsetY = centerY + (radius * 3) * sin(angle + (i * (360 / numCircles)));
    drawCircle(offsetX, offsetY, radius);
}

// Animation d'un objet (étoile tournante)
animate(starObject, 10) {
    while (isAnimating) {
        // Mise à jour de l'angle
        angle = angle + speed;

        // Mise à jour de la position de l'étoile
        var starX = centerX + (radius * 4) * cos(angle);
        var starY = centerY + (radius * 4) * sin(angle);

        // Effacer l'ancienne étoile
        clear(starObject);

        // Redessiner l'étoile à la nouvelle position
        drawStar(starX, starY, radius);

        // Vérification pour arrêter l'animation après un tour complet
        if (angle >= 360) {
            isAnimating = false;
        }
    }
}

// Instruction de copie-coller
// Copier une zone rectangulaire et la coller à un nouvel emplacement
copy(100, 100, 200, 200) to (400, 400);

// Exemple d'utilisation d'une condition
if (radius > 40 && numCircles >= 5) {
    // Dessiner un grand carré si la condition est vraie
    drawSquare(centerX, centerY, radius * 2);
} else {
    // Sinon, dessiner un triangle
    drawTriangle(centerX, centerY, radius * 2);
}

// Fonction personnalisée pour dessiner un carré
function drawSquare(x, y, size) {
    // Dessiner un carré centré en (x, y)
    rectangle(x - size / 2, y - size / 2, x + size / 2, y + size / 2);
}

// Fonction personnalisée pour dessiner un triangle
function drawTriangle(x, y, size) {
    // Dessiner un triangle équilatéral centré en (x, y)
    triangle(
        x, y - (size / sqrt(3)),
        x - (size / 2), y + (size / (2 * sqrt(3))),
        x + (size / 2), y + (size / (2 * sqrt(3)))
    );
}

// Boucle while pour créer une grille de points
var gridX = 0;
while (gridX <= 600) {
    var gridY = 0;
    while (gridY <= 600) {
        // Dessiner un petit cercle à chaque point de la grille
        drawCircle(gridX, gridY, 5);
        gridY = gridY + 50;
    }
    gridX = gridX + 50;
}

// Commentaire sur une seule ligne
// Fin du script draw++ complet
