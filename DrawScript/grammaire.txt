PROGRAM
    ::= { STATEMENT } ;

STATEMENT
    ::= VAR_DECLARATION
     | FUNCTION_DECLARATION
     | IF_STATEMENT
     | FOR_STATEMENT
     | WHILE_STATEMENT
     | ANIMATE_STATEMENT
     | COPY_STATEMENT
     | CURSOR_STATEMENT
     | RETURN_STATEMENT
     | EXPRESSION_STMT
     | EMPTY_STATEMENT
     ;

VAR_DECLARATION
    ::= KEYWORD("var") IDENTIFIER [ DELIMITER(":") IDENTIFIER ]
        ASSIGN("=") EXPRESSION
        DELIMITER(";")
    ;

FUNCTION_DECLARATION
    ::= KEYWORD("function") IDENTIFIER
        DELIMITER("(") [ PARAMETER_LIST ] DELIMITER(")")
        BLOCK
    ;

IF_STATEMENT
    ::= KEYWORD("if")
        DELIMITER("(") EXPRESSION DELIMITER(")")
        BLOCK
        [ KEYWORD("else") BLOCK ]
    ;

FOR_STATEMENT
    ::= KEYWORD("for")
        DELIMITER("(")
            FOR_INIT
            DELIMITER(";")
            EXPRESSION
            DELIMITER(";")
            ASSIGNMENT_EXPR
        DELIMITER(")")
        BLOCK
    ;

FOR_INIT
    ::= VAR_DECLARATION_NO_SEMI
     | ASSIGNMENT_EXPR
     | /* empty */
    ;

VAR_DECLARATION_NO_SEMI
    ::= KEYWORD("var") IDENTIFIER [ DELIMITER(":") IDENTIFIER ]
        ASSIGN("=") EXPRESSION
    ;

WHILE_STATEMENT
    ::= KEYWORD("while")
        DELIMITER("(") EXPRESSION DELIMITER(")")
        BLOCK
    ;

ANIMATE_STATEMENT
    ::= KEYWORD("animate")
        DELIMITER("(") EXPRESSION DELIMITER(",") EXPRESSION DELIMITER(")")
        BLOCK
    ;

COPY_STATEMENT
    ::= KEYWORD("copy")
        DELIMITER("(") ARGUMENT_LIST_4 DELIMITER(")")
        KEYWORD("to")
        DELIMITER("(") ARGUMENT_LIST_2 DELIMITER(")")
        DELIMITER(";")
    ;

ARGUMENT_LIST_4
    ::= EXPRESSION DELIMITER(",") EXPRESSION DELIMITER(",") EXPRESSION DELIMITER(",") EXPRESSION ;

ARGUMENT_LIST_2
    ::= EXPRESSION DELIMITER(",") EXPRESSION ;

CURSOR_STATEMENT
    ::= IDENTIFIER ACCESS_OPERATOR(".") IDENTIFIER
        DELIMITER("(") [ ARGUMENT_LIST ] DELIMITER(")")
        DELIMITER(";")
    ;

RETURN_STATEMENT
    ::= KEYWORD("return")
        [ EXPRESSION ]
        DELIMITER(";")
    ;

EXPRESSION_STMT
    ::= (ASSIGNMENT_EXPR | FUNCTION_CALL) DELIMITER(";") ;

ASSIGNMENT_EXPR
    ::= IDENTIFIER ASSIGN("=") EXPRESSION ;

FUNCTION_CALL
    ::= IDENTIFIER
         [
           ACCESS_OPERATOR(".") IDENTIFIER
         ]
         DELIMITER("(") [ ARGUMENT_LIST ] DELIMITER(")")
    ;

BLOCK
    ::= DELIMITER("{") { STATEMENT } DELIMITER("}") ;

PARAMETER_LIST
    ::= IDENTIFIER { DELIMITER(",") IDENTIFIER } ;

ARGUMENT_LIST
    ::= EXPRESSION { DELIMITER(",") EXPRESSION } ;

EMPTY_STATEMENT
    ::= DELIMITER(";") ;

(* Expressions - g√©rant OPERATOR pour +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||, !, etc. *)
EXPRESSION
    ::= LOGICAL_OR_EXPR
    ;

LOGICAL_OR_EXPR
    ::= LOGICAL_AND_EXPR
     | LOGICAL_OR_EXPR OPERATOR("||") LOGICAL_AND_EXPR
     | LOGICAL_OR_EXPR OPERATOR("&&") LOGICAL_AND_EXPR
    ;

LOGICAL_AND_EXPR
    ::= EQUALITY_EXPR
     | LOGICAL_AND_EXPR OPERATOR("&&") EQUALITY_EXPR
    ;

EQUALITY_EXPR
    ::= RELATIONAL_EXPR
     | EQUALITY_EXPR OPERATOR("==") RELATIONAL_EXPR
     | EQUALITY_EXPR OPERATOR("!=") RELATIONAL_EXPR
    ;

RELATIONAL_EXPR
    ::= ADDITIVE_EXPR
     | RELATIONAL_EXPR OPERATOR("<")  ADDITIVE_EXPR
     | RELATIONAL_EXPR OPERATOR("<=") ADDITIVE_EXPR
     | RELATIONAL_EXPR OPERATOR(">")  ADDITIVE_EXPR
     | RELATIONAL_EXPR OPERATOR(">=") ADDITIVE_EXPR
    ;

ADDITIVE_EXPR
    ::= MULTIPLICATIVE_EXPR
     | ADDITIVE_EXPR OPERATOR("+") MULTIPLICATIVE_EXPR
     | ADDITIVE_EXPR OPERATOR("-") MULTIPLICATIVE_EXPR
    ;

MULTIPLICATIVE_EXPR
    ::= UNARY_EXPR
     | MULTIPLICATIVE_EXPR OPERATOR("*") UNARY_EXPR
     | MULTIPLICATIVE_EXPR OPERATOR("/") UNARY_EXPR
     | MULTIPLICATIVE_EXPR OPERATOR("%") UNARY_EXPR
    ;

UNARY_EXPR
    ::= [ OPERATOR("+") | OPERATOR("-") | OPERATOR("!") ] PRIMARY_EXPR
    ;

PRIMARY_EXPR
    ::= NUMBER
     | STRING
     | BOOLEAN
     | IDENTIFIER
         (
           (DELIMITER("(") [ ARGUMENT_LIST ] DELIMITER(")")
            | /* juste la variable */ 
         )
     | DELIMITER("(") EXPRESSION DELIMITER(")")
    ;
