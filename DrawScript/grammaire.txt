<program>          ::= { <statement> }

<statement>        ::= <variable_declaration>
                     | <assignment>
                     | <function_definition>
                     | <function_call>
                     | <if_statement>
                     | <while_loop>
                     | <for_loop>
                     | <copy_paste_statement>
                     | <animation_block>
                     | <cursor_statement>
                     | <comment>

<variable_declaration> ::= "var" <identifier> [ "=" <expression> ] ";"

<assignment>       ::= <identifier> "=" <expression> ";"

<function_definition> ::= "function" <identifier> "(" [ <parameter_list> ] ")" "{" { <statement> } "}"

<function_call>    ::= <identifier> "(" [ <argument_list> ] ")" ";"

<if_statement>     ::= "if" "(" <expression> ")" "{" { <statement> } "}"
                     [ "else" "{" { <statement> } "}" ]

<while_loop>       ::= "while" "(" <expression> ")" "{" { <statement> } "}"

<for_loop>         ::= "for" "(" [ <initialization> ] ";" <expression> ";" [ <iteration> ] ")" "{" { <statement> } "}"

<copy_paste_statement> ::= "copy" "(" <coordinate_pair> "," <coordinate_pair> ")" 
                           "to" "(" <coordinate_pair> ")" ";"

<animation_block>  ::= "animate" "(" <identifier> "," <duration> ")" "{" { <statement> } "}"

<cursor_statement> ::= "cursor" "(" <coordinate_pair> ")" ";"

<comment>          ::= "//" <comment_text>

<expression>       ::= <logical_or_expression>

<logical_or_expression> ::= <logical_and_expression> { "||" <logical_and_expression> }

<logical_and_expression> ::= <equality_expression> { "&&" <equality_expression> }

<equality_expression> ::= <relational_expression> [ ( "==" | "!=" ) <relational_expression> ]

<relational_expression> ::= <additive_expression> [ ( "<" | ">" | "<=" | ">=" ) <additive_expression> ]

<additive_expression> ::= <multiplicative_expression> { ( "+" | "-" ) <multiplicative_expression> }

<multiplicative_expression> ::= <unary_expression> { ( "*" | "/" | "%" ) <unary_expression> }

<unary_expression> ::= [ ( "+" | "-" | "!" ) ] <primary_expression>

<primary_expression> ::= <number>
                       | <string>
                       | <identifier>
                       | "(" <expression> ")"

<initialization>   ::= <variable_declaration> | <assignment>

<iteration>        ::= <assignment>

<parameter_list>   ::= <identifier> { "," <identifier> }

<argument_list>    ::= <expression> { "," <expression> }

<coordinate_pair>  ::= <expression> "," <expression>

<duration>         ::= <expression>

<identifier>       ::= <letter> { <letter_or_digit> }

<number>           ::= <digit> { <digit> } [ "." <digit> { <digit> } ]

<string>           ::= '"' { <any_character_except_quote> } '"'

<letter>           ::= "a" | "b" | ... | "z" | "A" | "B" | ... | "Z" | "_"

<letter_or_digit>  ::= <letter> | <digit>

<digit>            ::= "0" | "1" | ... | "9"

<comment_text>     ::= { <any_character_except_newline> }

A
