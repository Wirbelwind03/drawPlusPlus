program :
    { statement }

statement :
      variableDeclaration
    | functionDefinition
    | assignmentOrFunctionCall
    | ifStatement
    | whileLoop
    | forLoop
    | copyPasteStatement
    | animationBlock
    | cursorStatement
    | returnStatement
    | ';'  // Pour permettre des points-virgules isolés

variableDeclaration :
    'var' IDENTIFIER [ ':' type ] [ '=' expression ] ';'

type :
    'cursor'
  | // Autres types si nécessaires

assignmentOrFunctionCall :
      assignment
    | functionCall
    | cursorMethodCallStatement

assignment :
    IDENTIFIER '=' expression ';'

functionDefinition :
    'function' IDENTIFIER '(' [ parameterList ] ')' block

parameterList :
    IDENTIFIER { ',' IDENTIFIER }

functionCall :
    IDENTIFIER '(' [ argumentList ] ')' ';'

argumentList :
    expression { ',' expression }

cursorMethodCallStatement :
    IDENTIFIER '.' cursorMethodCall ';'

cursorMethodCall :
      'moveTo' '(' expression ',' expression ')'
    | 'rotate' '(' expression ')'
    | 'drawLine' '(' expression ',' expression ')'
    | 'drawCircle' '(' expression ')'
    | 'drawRectangle' '(' expression ',' expression ')'
    | // Autres méthodes du curseur

ifStatement :
    'if' '(' expression ')' block [ 'else' block ]

whileLoop :
    'while' '(' expression ')' block

forLoop :
    'for' '(' [ initialization ] ';' [ expression ] ';' [ iteration ] ')' block

initialization :
      variableDeclaration
    | assignment

iteration :
    assignment

copyPasteStatement :
    'copy' '(' coordinatePair ',' coordinatePair ')' 'to' '(' coordinatePair ')' ';'

animationBlock :
    'animate' '(' IDENTIFIER ',' expression ')' block

cursorStatement :
    'cursor' '(' expression ',' expression ')' ';'  // Instruction de base du curseur
  | cursorMethodCallStatement

returnStatement :
    'return' expression ';'

block :
    '{' { statement } '}'

coordinatePair :
    expression ',' expression

expression :
    logicalOrExpression

logicalOrExpression :
    logicalAndExpression { '||' logicalAndExpression }

logicalAndExpression :
    equalityExpression { '&&' equalityExpression }

equalityExpression :
    relationalExpression { ( '==' | '!=' ) relationalExpression }

relationalExpression :
    additiveExpression { ( '<' | '>' | '<=' | '>=' ) additiveExpression }

additiveExpression :
    multiplicativeExpression { ( '+' | '-' ) multiplicativeExpression }

multiplicativeExpression :
    unaryExpression { ( '*' | '/' | '%' ) unaryExpression }

unaryExpression :
    [ '+' | '-' | '!' ] primaryExpression

primaryExpression :
      NUMBER
    | STRING
    | BOOLEAN
    | IDENTIFIER [ functionCallExpression ]
    | '(' expression ')'

functionCallExpression :
    '(' [ argumentList ] ')'

BOOLEAN :
    'true' | 'false'

NUMBER :
    // Nombres entiers ou à virgule flottante

STRING :
    // Chaînes de caractères entre guillemets

IDENTIFIER :
    // Noms de variables, fonctions, etc.
